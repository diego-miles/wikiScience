//ðŸ§©Don't Edit this file.âœ¨Generated in Sun May 19 2024 19:16:14 GMT-0600 (Central Standard Time)âœ¨

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

type Ratings {
  amazon    RatingDetail
  goodreads RatingDetail
  google    RatingDetail
}

type RatingDetail {
  average Float
  number  Int
  link    String
}

model Book {
  id                         String                  @id @default(auto()) @map("_id") @db.ObjectId
  englishTitle               String
  spanishTitle               String?
  authors                    String[]
  difficulty                 String?
  keywords                   String[]
  span                       String[]
  coverImage                 String?
  syllabusImages             String[]
  pages                      Int?
  lastEditionYear            Int?
  lastEditionNumber          Int?
  publicationDate            Int?
  originCountry              String?
  spanishEdition             Boolean?
  summary                    String[]
  amazonLink                 String?
  ratings                    Ratings?
  topicRecommendation        topicRecommendation?    @relation(fields: [topicRecommendationSlug], references: [slug])
  topicRecommendationSlug    String?
  subFieldRecommendation     subFieldRecommendation? @relation(fields: [subFieldRecommendationSlug], references: [slug])
  subFieldRecommendationSlug String?
  syllabus                   Syllabus[]
  slug                       String                  @unique

  @@map("book")
}

type Syllabus {
  chapter  String
  sections Section[]
}

type Section {
  title       String
  subsections Subsection[]
}

type Subsection {
  title String
}

model topicRecommendation {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  field        String
  subField     String
  topic        String
  topicSummary String
  slug         String @unique
  books        Book[]

  @@map("topicsRecommendation")
}

model subFieldRecommendation {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  field    String
  subField String
  slug     String @unique
  books    Book[]

  @@map("subfieldsRecommendation")
}

model ContextDefinition {
  id         String                  @id @map("_id") @db.ObjectId
  concept    String
  formula    String?
  definition String[]
  types      ContextDefinitionType[]
  slug       String                  @unique
}

type ContextDefinitionType {
  type        String?
  description String?
  formula     String?
}

model Word {
  id                     String                   @id @map("_id") @db.ObjectId
  word                   String
  slug                   String                   @unique
  pronunciation          String?
  definitions            Definition[]
  etymology              String?
  synonyms               String[]
  antonyms               String[]
  examples               String[]
  images                 String[]
  audio                  String?
  language               String?
  tags                   String[]
  relatedConcepts        RelatedConcept[]
  applications           Application[]
  measurementUnits       MeasurementUnit[]
  historicalSignificance HistoricalSignificance[]
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime?                @updatedAt
}

type RelatedConcept {
  concept String?
}

type Application {
  application String?
}

type MeasurementUnit {
  unit String?
}

type HistoricalSignificance {
  event String?
}

type Definition {
  partOfSpeech String?
  meaning      String?
  example      String?
  source       Source
}

type Source {
  author                          String? // Last name, First initial. Middle initial (if applicable) 
  publicationYearDate             String? // Year of publication
  title                           String
  url                             String?
  sourceType                      String? // Book, Journal Article, Website, etc. (use controlled vocabulary) 
  // Book-Specific Fields
  isbn                            String?
  doi                             String?
  bookEdition                     String?
  bookChapter                     String?
  publisher                       String?
  placeOfPublication              String?
  // Journal Article-Specific Fields
  journalName                     String?
  volume                          String?
  issue                           String?
  pages                           String?
  // Website-Specific Fields
  websiteName                     String?
  publicationDateofWebPublication String? // Can be more specific than year, e.g., "2023-11-20" 
  accessDate                      String?
}

// Model for the Electronic Component
model ElectronicComponent {
  id                      String                                    @id @default(auto()) @map("_id") @db.ObjectId
  name                    String                                    @unique
  slug                    String                                    @unique
  category                String?
  type                    String?
  subtype                 String?
  manufacturers           String[]
  description             String?
  lifeSpan                String?
  history                 Json
  Glossary                String[]
  functionDiagram         String?
  operationDiagram        String?
  applicationDiagram      String?
  availability            Boolean?
  // eolDate               DateTime
  pricing                 Float?
  // packageType           String
  footprint               String?
  standardsAndRegulations String[]
  relatedDocuments        String[]
  createdAt               DateTime                                  @default(now()) @map("createdAt")
  updatedAt               DateTime                                  @updatedAt @map("updatedAt")
  // Relationships
  variants                ElectronicComponentVariant[]
  Measurements            ElectronicComponentMeasurements[]
  function                ElectronicComponentFunction?
  operation               ElectronicComponentOperation?
  applications            ElectronicComponentApplication[]
  // technicalSpecs                  ElectronicComponentTechnicalSpecifications?
  thermalSpecifications   ElectronicComponentThermalSpecifications?
  datasheets              ElectronicComponentDatasheet[]
  additionalResources     ElectronicComponentAdditionalResource[]
}

// type History {
//   year String
//   event String
// }

// Model for Electronic Component Variants
model ElectronicComponentVariant {
  id                      String              @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  description             String
  diagram                 String?
  electronicComponent     ElectronicComponent @relation(fields: [electronicComponentName], references: [name])
  electronicComponentName String
}

// Model for Measurements in Science about Electronic Components
model ElectronicComponentMeasurements {
  id                      String              @id @default(auto()) @map("_id") @db.ObjectId
  electronicComponent     ElectronicComponent @relation(fields: [electronicComponentName], references: [name])
  electronicComponentName String
  temperature             String
  voltage                 String
  current                 String
  resistance              String
  capacitance             String
  inductance              String
  frequency               String
  power                   String
  signalToNoiseRatio      String
  impedance               String
  gain                    String
  distortion              String
  bandwidth               String
  efficiency              String
  otherVariables          String
  toleranceAccuracy       String
}

// Model for Electronic Component Functions
model ElectronicComponentFunction {
  id                      String               @id @default(auto()) @map("_id") @db.ObjectId
  primaryFunction         String
  physicalPrinciples      Json
  chemistryPrinciples     String[]
  comparisons             String[]
  capabilities            String[]
  limitations             String[]
  diagrams                String?
  electronicComponent     ElectronicComponent? @relation(fields: [electronicComponentName], references: [name])
  electronicComponentName String               @unique
}

// Model for Electronic Component Operations
model ElectronicComponentOperation {
  id                         String                            @id @default(auto()) @map("_id") @db.ObjectId
  internalStructure          String
  operatingMechanisms        String
  keyParameters              ElectronicComponentKeyParameter[]
  inputOutputCharacteristics String
  functionalRelationships    String
  equations                  String?
  diagrams                   String?
  electronicComponent        ElectronicComponent?              @relation(fields: [electronicComponentName], references: [name])
  electronicComponentName    String                            @unique
}

// Model for Key Parameters of Electronic Components
model ElectronicComponentKeyParameter {
  id                      String                       @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  description             String
  operation               ElectronicComponentOperation @relation(fields: [electronicComponentName], references: [electronicComponentName])
  electronicComponentName String
}

// Model for Electronic Component Applications
model ElectronicComponentApplication {
  id                      String              @id @default(auto()) @map("_id") @db.ObjectId
  field                   String
  examples                String[]
  designConsiderations    String
  challenges              String[]
  electronicComponent     ElectronicComponent @relation(fields: [electronicComponentName], references: [name])
  electronicComponentName String
}

// Model for Thermal Specifications of Electronic Components
model ElectronicComponentThermalSpecifications {
  id                                 String               @id @default(auto()) @map("_id") @db.ObjectId
  thermalResistanceJunctionToCase    String
  thermalResistanceJunctionToAmbient String
  maximumOperatingTemperature        String
  minimumOperatingTemperature        String
  electronicComponent                ElectronicComponent? @relation(fields: [electronicComponentName], references: [name])
  electronicComponentName            String               @unique
}

// Model for Additional Resources of Electronic Components
model ElectronicComponentAdditionalResource {
  id                      String              @id @default(auto()) @map("_id") @db.ObjectId
  type                    String
  description             String
  link                    String
  electronicComponent     ElectronicComponent @relation(fields: [electronicComponentName], references: [name])
  electronicComponentName String
}

// Model for Datasheets of Electronic Components
model ElectronicComponentDatasheet {
  id                      String               @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  description             String
  url                     String
  // electronicComponentTechnicalSpecifications   ElectronicComponentTechnicalSpecifications? @relation(fields: [electronicComponentTechnicalSpecificationsId], references: [electronicComponentName])
  // electronicComponentTechnicalSpecificationsId String?
  electronicComponent     ElectronicComponent? @relation(fields: [electronicComponentName], references: [name])
  electronicComponentName String?
}

model Event {
  id           String             @id @map("_id") @db.ObjectId
  name         String             @unique
  description  String?
  date         DateTime?
  fieldId      String?            @db.ObjectId
  references   Reference[]
  participants EventParticipant[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model Person {
  id        String             @id @map("_id") @db.ObjectId
  name      String
  birthYear Int?
  deathYear Int?
  events    EventParticipant[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model Field {
  id          String   @id @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Reference {
  id                  String  @id @map("_id") @db.ObjectId
  title               String
  author              String? // Last name, First initial. Middle initial (if applicable) 
  publicationDateYear String? // Year of publication
  url                 String? // Include DOI if available
  sourceType          String? // Book, Journal Article, Website, etc. (use controlled vocabulary) 

  // Book-Specific Fields
  bookEdition        String?
  publisher          String?
  placeOfPublication String?

  // Journal Article-Specific Fields
  journalName String?
  volume      String?
  issue       String?
  pages       String?

  // Website-Specific Fields
  websiteName                 String?
  publicationDateOntheWebsite String? // Can be more specific than year, e.g., "2023-11-20" 
  accessDate                  String?

  // Other Source Types (add as needed)
  // ...

  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventParticipant {
  id        String   @id @map("_id") @db.ObjectId
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String   @db.ObjectId
  person    Person   @relation(fields: [personId], references: [id])
  personId  String   @db.ObjectId
  // ... other fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChemicalElement {
  id                           String                               @id @default(auto()) @map("_id") @db.ObjectId
  symbol                       String                               @unique
  name                         String
  slug                         String                               @unique
  atomicNumber                 String?
  atomicWeight                 String?
  description                  String?
  history                      History[]
  discoveryYear                String
  meltingPoint                 String?
  boilingPoint                 String?
  density                      String?
  appearance                   String?
  classifications              ChemicalElementClassification[]
  atomicStructure              ElementAtomicStructure?
  isotopes                     ElementIsotope[]
  compounds                    ElementCompound[]
  crystalStructures            ElementCrystalStructure[]
  allotropes                   ElementAllotrope[]
  electronConfig               ElementElectronConfiguration? // ElementElectronConfiguration
  oxidationStates              ElementOxidationState[]
  physicalProperties           ElementPhysicalProperties?
  chemicalProperties           ElementChemicalProperties?
  environmentalSafety          ElementEnvironmentalSafety?
  practicalApplications        ElementPracticalApplication[] // Array of ElementPracticalApplication
  spectralLines                ElementSpectralLine[]
  naturalOccurrence            ElementNaturalOccurrence?
  biologicalRole               ElementBiologicalRole?
  economicData                 ElementEconomicData?
  imageGallery                 ImageGallery[]
  healthEnvironmentalImpact    ElementHealthEnvironmentalImpact?
  futurePredictions            ElementFuturePrediction[]
  userInteractions             ElementuserInteractions[]
  externalResources            ElementExternalResource[]
  magneticElectricalProperties ElementMagneticElectricalProperties?
  opticalProperties            ElementOpticalProperties?
  quantumProperties            ElementQuantumProperties?
  synthesisProduction          ElementSynthesisProduction?
  safetyDataSheet              ElementSafetyDataSheet?
  legalStatus                  ElementLegalStatus?
  interdisciplinaryConnections Json?
}

type ElementPracticalApplication {
  application String?
  description String?
}

type ElementElectronConfiguration {
  configuration String?
  description   String?
}

// type ElementStringerdisciplinaryConnection {
//     connectionDetails String
// }

type ElementLegalStatus {
  regulations       String?
  legalRestrictions String?
}

type ElementSafetyDataSheet {
  handling         String?
  storage          String?
  firstAidMeasures String?
}

type ElementSynthesisProduction {
  synthesisMethods  String?
  extractionMethods String?
  globalProduction  String?
}

type ElementQuantumProperties {
  quantumNumbers     Json?
  electronShellModel Json?
  energyLevels       Json?
}

type ElementOpticalProperties {
  refractiveIndex    String?
  reflectivity       String?
  absorptionSpectrum String?
}

type ElementMagneticElectricalProperties {
  magneticSusceptibility String?
  electricalResistivity  String?
  hallCoefficient        String?
}

type ElementExternalResource {
  resourceType String?
  link         String?
  description  String?
}

type ElementFuturePrediction {
  prediction  String?
  description String?
}

type ElementHealthEnvironmentalImpact {
  healthImpact        String?
  environmentalImpact String?
}

type ChemicalElementClassification {
  classification String?
  description    String?
}

type ElementAtomicStructure {
  electrons                String?
  protons                  String?
  neutrons                 String?
  ionizationEnergy         String?
  electronAffinity         String?
  atomicRadius             String?
  atomicPolarization       String?
  electronegativity        String?
  firstIonizationPotential String?
}

type ElementIsotope {
  isotopeNumber String?
  abundance     String?
  halfLife      String?
  decayMode     String?
  description   String?
}

type ElementCompound {
  name        String?
  formula     String?
  description String?
}

type History {
  event       String?
  year        String?
  description String?
}

type ElementCrystalStructure {
  type        String?
  temperature String?
  description String?
}

type ElementAllotrope {
  name        String?
  description String?
}

type ElementOxidationState {
  state       String?
  description String?
}

type ElementPhysicalProperties {
  meltingPoint                String?
  boilingPoint                String?
  density                     String?
  atomicRadius                String?
  atomicVolume                String?
  covalentRadius              String?
  molarHeat                   String?
  thermalConductivity         String?
  soundVelocity               String?
  mohsHardness                String?
  brinellHardness             String?
  specificHeatCapacity        String?
  thermalExpansionCoefficient String?
  phaseTransitionTemperatures String?
}

type ElementChemicalProperties {
  reactivity                 String?
  commonOxidationStates      String?
  standardReductionPotential String?
  description                String?
}

type ElementEnvironmentalSafety {
  healthHazards     String?
  safetyPrecautions String?
}

type ImageGallery {
  imageUrl    String?
  description String?
}

type ElementSpectralLine {
  wavelength String?
  intensity  String?
  lineType   String?
}

type ElementNaturalOccurrence {
  occurrenceType String?
  description    String?
}

type ElementBiologicalRole {
  role        String?
  description String?
}

type ElementEconomicData {
  marketPrice        String?
  producingCountries String?
  industrialUse      String?
  description        String?
}

type ElementuserInteractions {
  contribution String?
  question     String?
  discussion   String?
}
