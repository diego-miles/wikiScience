//üß©Don't Edit this file.‚ú®Generated in Sat Mar 16 2024 23:20:40 GMT-0600 (Central Standard Time)‚ú®

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Ratings {
  englishTitle String       @id @map("_id")
  amazon       RatingDetail
  goodreads    RatingDetail
  google       RatingDetail
  Book         Book[]

  @@map("ratings")
}

type RatingDetail {
  average Float
  number  Int
  link    String
}

model Book {
  id                         String                  @id @default(auto()) @map("_id") @db.ObjectId
  englishTitle               String
  spanishTitle               String?
  authors                    String[]
  difficulty                 String
  keywords                   String[]
  span                       String[]
  coverImage                 String?
  syllabusImages             String[]
  pages                      Int
  lastEditionYear            Int? // numero de edici√≥n
  lastEditionNumber          Int? // a√±o de edicion
  publicationDate            Int?
  originCountry              String?
  spanishEdition             Boolean?
  summary                    String[]
  amazonLink                 String?
  ratings                    Ratings?                @relation(fields: [englishTitle], references: [englishTitle])
  topicRecommendation        topicRecommendation?    @relation(fields: [topicRecommendationSlug], references: [slug])
  topicRecommendationSlug    String?
  subFieldRecommendation     subFieldRecommendation? @relation(fields: [subFieldRecommendationSlug], references: [slug])
  subFieldRecommendationSlug String?

  @@map("book")
}

model topicRecommendation {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  field        String
  subField     String
  topic        String @unique
  topicSummary String
  slug         String @unique
  books        Book[]

  @@map("topicsRecommendation")
}

model subFieldRecommendation {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  field    String
  subField String
  slug     String @unique
  books    Book[]

  @@map("subfieldsRecommendation")
}

// Model for the Electronic Component
model ElectronicComponent {
  id                      String                                    @id @default(auto()) @map("_id") @db.ObjectId
  name                    String                                    @unique
  slug                    String                                    @unique
  category                String
  type                    String
  subtype                 String
  manufacturers           String[]
  description             String
  lifeSpan                String
  history                 Json
  Glossary                String[]
  functionDiagram         String?
  operationDiagram        String?
  applicationDiagram      String?
  availability            Boolean
  // eolDate               DateTime
  pricing                 Float
  // packageType           String
  footprint               String
  standardsAndRegulations String[]
  relatedDocuments        String[]
  createdAt               DateTime                                  @default(now()) @map("createdAt")
  updatedAt               DateTime                                  @updatedAt @map("updatedAt")
  // Relationships
  variants                ElectronicComponentVariant[]
  Measurements            ElectronicComponentMeasurements[]
  function                ElectronicComponentFunction?
  operation               ElectronicComponentOperation?
  applications            ElectronicComponentApplication[]
  // technicalSpecs                  ElectronicComponentTechnicalSpecifications?
  thermalSpecifications   ElectronicComponentThermalSpecifications?
  datasheets              ElectronicComponentDatasheet[]
  additionalResources     ElectronicComponentAdditionalResource[]
}

// type History {
//   year String
//   event String
// }

// Model for Electronic Component Variants
model ElectronicComponentVariant {
  id                      String              @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  description             String
  diagram                 String?
  electronicComponent     ElectronicComponent @relation(fields: [electronicComponentName], references: [name])
  electronicComponentName String
}

// Model for Measurements in Science about Electronic Components
model ElectronicComponentMeasurements {
  id                      String              @id @default(auto()) @map("_id") @db.ObjectId
  electronicComponent     ElectronicComponent @relation(fields: [electronicComponentName], references: [name])
  electronicComponentName String
  temperature             String
  voltage                 String
  current                 String
  resistance              String
  capacitance             String
  inductance              String
  frequency               String
  power                   String
  signalToNoiseRatio      String
  impedance               String
  gain                    String
  distortion              String
  bandwidth               String
  efficiency              String
  otherVariables          String
  toleranceAccuracy       String
}

// Model for Electronic Component Functions
type ElectronicComponentFunction {
  primaryFunction     String
  physicalPrinciples  Json
  chemistryPrinciples String[]
  comparisons         String[]
  capabilities        String[]
  limitations         String[]
  diagrams            String?
}

// Model for Electronic Component Operations
type ElectronicComponentOperation {
  internalStructure          String
  operatingMechanisms        String
  keyParameters              ElectronicComponentKeyParameter[]
  inputOutputCharacteristics String
  functionalRelationships    String
  equations                  String?
  diagrams                   String?
}

// Model for Key Parameters of Electronic Components
type ElectronicComponentKeyParameter {
  name                    String
  description             String
  electronicComponentName String
}

// Model for Electronic Component Applications
model ElectronicComponentApplication {
  id                      String              @id @default(auto()) @map("_id") @db.ObjectId
  field                   String
  examples                String[]
  designConsiderations    String
  challenges              String[]
  electronicComponent     ElectronicComponent @relation(fields: [electronicComponentName], references: [name])
  electronicComponentName String
}

// Model for Thermal Specifications of Electronic Components
model ElectronicComponentThermalSpecifications {
  id                                 String               @id @default(auto()) @map("_id") @db.ObjectId
  thermalResistanceJunctionToCase    String
  thermalResistanceJunctionToAmbient String
  maximumOperatingTemperature        String
  minimumOperatingTemperature        String
  electronicComponent                ElectronicComponent? @relation(fields: [electronicComponentName], references: [name])
  electronicComponentName            String               @unique
}

// Model for Additional Resources of Electronic Components
type ElectronicComponentAdditionalResource {
  type        String
  description String
  link        String
}

// Model for Datasheets of Electronic Components
type ElectronicComponentDatasheet {
  name        String
  description String
  url         String
  // electronicComponentTechnicalSpecifications   ElectronicComponentTechnicalSpecifications? @relation(fields: [electronicComponentTechnicalSpecificationsId], references: [electronicComponentName])
  // electronicComponentTechnicalSpecificationsId String?
}

model ChemicalElement {
  id                           String  @id @default(auto()) @map("_id") @db.ObjectId
  symbol                       String  @unique
  name                         String  @unique
  slug                         String  @unique
  atomicNumber                 Int
  atomicWeight                 Float
  description                  String
  discoveryYear                Int
  meltingPoint                 Float?
  boilingPoint                 Float?
  density                      Float?
  appearance                   String?
  classifications              Json // Array de ChemicalElementClassification
  atomicStructure              Json // ElementAtomicStructure
  isotopes                     Json // Array de ElementIsotope
  compounds                    Json // Array de ElementCompound
  history                      Json // Array de ChemicalElementHistory
  abundances                   Json // Array de ElementIsotopeAbundance
  crystalStructures            Json // Array de ElementCrystalStructure
  allotropes                   Json // Array de ElementAllotrope
  electronConfig               Json // ElementElectronConfiguration
  oxidationStates              Json // Array de ElementOxidationState
  physicalProperties           Json // ElementPhysicalProperties
  chemicalProperties           Json // ElementChemicalProperties
  environmentalSafety          Json // ElementEnvironmentalSafety
  practicalApplications        Json // Array de ElementPracticalApplication
  spectralLines                Json // Array de ElementSpectralLine
  naturalOccurrence            Json // ElementNaturalOccurrence
  biologicalRole               Json // ElementBiologicalRole
  economicData                 Json // ElementEconomicData
  imageGallery                 Json // Array de ElementImageGallery
  futurePredictions            Json // Array de ElementFuturePrediction
  userInteractions             Json // Array de ElementUserInteraction
  externalResources            Json // Array de ElementExternalResource
  magneticElectricalProperties Json // ElementMagneticElectricalProperties
  opticalProperties            Json // ElementOpticalProperties
  quantumProperties            Json // ElementQuantumProperties
  synthesisProduction          Json // ElementSynthesisProduction
  safetyDataSheet              Json // ElementSafetyDataSheet
  legalStatus                  Json // ElementLegalStatus
  interdisciplinaryConnections Json // Array de ElementInterdisciplinaryConnection
}

// Los modelos espec√≠ficos como ElementAtomicStructure, ElementChemicalProperties, etc., ya no son necesarios de forma independiente, ya que sus campos se integran como objetos JSON en el modelo ChemicalElement.
