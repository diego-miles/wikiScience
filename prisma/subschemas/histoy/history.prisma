model Event {
  id          String             @id @map("_id") @db.ObjectId
  name        String             @unique
  description String?
  date        DateTime?
  fieldId     String?            @db.ObjectId
  references  Reference[]
  participants EventParticipant[] 
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Person {
  id        String    @id @map("_id") @db.ObjectId
  name      String
  birthYear Int?
  deathYear Int?
  events     EventParticipant[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt 
}

model Field {
  id          String    @id @map("_id") @db.ObjectId
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


model Reference {
  id             String    @id @map("_id") @db.ObjectId
  title          String    
  author         String?   // Last name, First initial. Middle initial (if applicable) 
  publicationDateYear String?      // Year of publication
  url            String?   // Include DOI if available
  sourceType     String?   // Book, Journal Article, Website, etc. (use controlled vocabulary) 

  // Book-Specific Fields
  bookEdition    String?
  publisher      String?
  placeOfPublication String?

  // Journal Article-Specific Fields
  journalName   String?
  volume         String?
  issue          String?
  pages          String? 

  // Website-Specific Fields
  websiteName    String?
  publicationDateOntheWebsite String? // Can be more specific than year, e.g., "2023-11-20" 
  accessDate      String?

  // Other Source Types (add as needed)
  // ...

  event       Event    @relation(fields: [eventId], references: [id])
  eventId     String    @db.ObjectId
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}



model EventParticipant {
  id        String    @id @map("_id") @db.ObjectId 
  event     Event     @relation(fields: [eventId], references: [id])
  eventId   String    @db.ObjectId
  person    Person    @relation(fields: [personId], references: [id])
  personId  String    @db.ObjectId
  // ... other fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}