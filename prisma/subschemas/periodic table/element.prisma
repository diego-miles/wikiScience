// Define the Element model to store basic information about each element
model Element {
  symbol              String            @id @map("_id") 
  name                String            @unique
  atomicNumber        Int
  atomicWeight        Float
  description         String
  discoveryYear       Int
  meltingPoint        Float?
  boilingPoint        Float?
  density             Float?
  appearance          String?
  classification      ElementClassification[]
  atomicStructure     AtomicStructure?
  properties          ElementProperties?
  isotopes            Isotope[]
  compounds           Compound[]
  history             ElementHistory[]
  abundances          IsotopeAbundance[]
  crystalStructures   CrystalStructure[]
  allotropes          Allotrope[]
  electronConfig      ElectronConfiguration?
  oxidationStates     OxidationState?
  physicalProperties  PhysicalProperties?
  chemicalProperties  ChemicalProperties?
  environmentalSafety EnvironmentalSafety?
  practicalApplications PracticalApplication[]
}

// Define the classification of each element (e.g., metal, non-metal, metalloid)
model ElementClassification {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  classification  String
  description     String?
  
  // Relationships
  element         Element           @relation(fields: [elementSymbol], references: [symbol])
  elementSymbol   String            @unique
}

// Define the atomic structure of each element
model AtomicStructure {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  electrons Int
  protons   Int
  neutrons Int
  ionizationEnergy Float?
  electronAffinity Float?
  atomicRadius     Float?
  // Add other atomic structure-related properties
  
  // Relationships
  element   Element           @relation(fields: [elementSymbol], references: [symbol])
  elementSymbol String         @unique
}

// Define various properties of each element (e.g., melting point, boiling point)
model ElementProperties {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  meltingPoint   Float?
  boilingPoint   Float?
  density        Float?
  atomicRadius   Float?
  atomicVolume   Float?
  covalentRadius Float?
  // Add other properties as needed

  // Relationships
  element        Element           @relation(fields: [elementSymbol], references: [symbol])
  elementSymbol String            @unique
}

// Define isotopes for each element
model Isotope {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  isotopeNumber  Int
  abundance      Float?
  halfLife       Float?
  decayMode      String?
  // Add other isotope-related properties

  // Relationships
  element        Element           @relation(fields: [elementSymbol], references: [symbol])
  elementSymbol String      @unique
  abundances     IsotopeAbundance[]
}

// Define isotope abundance for each element
model IsotopeAbundance {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  isotope        Isotope           @relation(fields: [elementSymbol], references: [elementSymbol])
  isotopeId      String
  abundance      Float
  // Relationships
  element        Element           @relation(fields: [elementSymbol], references: [symbol])
  elementSymbol String
}


// Define the history of each element
model ElementHistory {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  event          String
  year           Int
  description    String?
  // Add other history-related properties

  // Relationships
  element        Element           @relation(fields: [elementSymbol], references: [symbol])
  elementSymbol String
}


// Define crystal structures for each element
model CrystalStructure {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  type           String
  temperature    Float?
  // Add other crystal structure-related properties

  // Relationships
  element        Element           @relation(fields: [elementSymbol], references: [symbol])
  elementSymbol String
}

// Define allotropes for each element
model Allotrope {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  // Add other allotrope-related properties

  // Relationships
  element        Element           @relation(fields: [elementSymbol], references: [symbol])
  elementSymbol String @unique
}

// Define electron configuration for each element
model ElectronConfiguration {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  configuration  String
  // Add other electron configuration-related properties

  // Relationships
  element        Element           @relation(fields: [elementSymbol], references: [symbol])
  elementSymbol String @unique
}

// Define oxidation states for each element
model OxidationState {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  state          Int
  // Add other oxidation state-related properties

  // Relationships
  element        Element           @relation(fields: [elementSymbol], references: [symbol])
  elementSymbol String @unique
}

// Define physical properties for each element
model PhysicalProperties {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  molarHeat      Float?
  thermalConductivity Float?
  // Add other physical property-related properties

  // Relationships
  element        Element           @relation(fields: [elementSymbol], references: [symbol])
  elementSymbol String @unique
}

// Define chemical properties for each element
model ChemicalProperties {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  electronegativity Float?
  ionizationPotential Float?
  // Add other chemical property-related properties

  // Relationships
  element        Element           @relation(fields: [elementSymbol], references: [symbol])
  elementSymbol String @unique
}

// Define environmental and safety information for each element
model EnvironmentalSafety {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  healthHazards  String?
  safetyPrecautions String?
  // Add other environmental safety-related properties

  // Relationships
  element        Element           @relation(fields: [elementSymbol], references: [symbol])
  elementSymbol String @unique
}

// Define practical applications for each element
model PracticalApplication {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  application    String
  description    String?
  // Add other practical application-related properties

  // Relationships
  element        Element           @relation(fields: [elementSymbol], references: [symbol])
  elementSymbol String
}

// Define compounds related to each element
model Compound {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  formula        String
  description    String?
  // Add other compound-related properties

  // Relationships
  element        Element           @relation(fields: [elementSymbol], references: [symbol])
  elementSymbol String
}
